
ps2kbd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d4  00800100  00000a5e  00000af2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  008001d4  008001d4  00000bc6  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000bc6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b8d  00000000  00000000  00000cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000042e  00000000  00000000  0000184d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000424  00000000  00000000  00001c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000164  00000000  00000000  000020a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ce  00000000  00000000  00002204  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c6  00000000  00000000  000024d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002898  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e5       	ldi	r30, 0x5E	; 94
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 3d       	cpi	r26, 0xD4	; 212
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 ed       	ldi	r26, 0xD4	; 212
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 3e       	cpi	r26, 0xE5	; 229
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c2 01 	call	0x384	; 0x384 <main>
  9e:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <calc_parity>:
volatile uint8_t framing_errors = 0;

int calc_parity(unsigned parity_x) 
{
	unsigned parity_y;
	parity_y = parity_x ^ (parity_x >> 1);
  a6:	9c 01       	movw	r18, r24
  a8:	36 95       	lsr	r19
  aa:	27 95       	ror	r18
  ac:	28 27       	eor	r18, r24
  ae:	39 27       	eor	r19, r25
    parity_y = parity_y ^ (parity_y >> 2);
  b0:	a9 01       	movw	r20, r18
  b2:	56 95       	lsr	r21
  b4:	47 95       	ror	r20
  b6:	56 95       	lsr	r21
  b8:	47 95       	ror	r20
  ba:	42 27       	eor	r20, r18
  bc:	53 27       	eor	r21, r19
    parity_y = parity_y ^ (parity_y >> 4);
  be:	ca 01       	movw	r24, r20
  c0:	74 e0       	ldi	r23, 0x04	; 4
  c2:	96 95       	lsr	r25
  c4:	87 95       	ror	r24
  c6:	7a 95       	dec	r23
  c8:	e1 f7       	brne	.-8      	; 0xc2 <calc_parity+0x1c>
  ca:	84 27       	eor	r24, r20
  cc:	95 27       	eor	r25, r21
    return parity_y & 1;
}
  ce:	81 70       	andi	r24, 0x01	; 1
  d0:	99 27       	eor	r25, r25
  d2:	08 95       	ret

000000d4 <framing_error>:

void framing_error(uint8_t num)
{
	// Deal with PS/2 Protocol Framing errors. delay for the rest of the packet and clear interrupts generated during the delay.						
	printf("!F");
  d4:	82 e8       	ldi	r24, 0x82	; 130
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	9f 93       	push	r25
  da:	8f 93       	push	r24
  dc:	0e 94 3d 02 	call	0x47a	; 0x47a <printf>
	framing_errors++;
  e0:	80 91 d4 01 	lds	r24, 0x01D4
  e4:	8f 5f       	subi	r24, 0xFF	; 255
  e6:	80 93 d4 01 	sts	0x01D4, r24
	EIMSK &= ~(1 << INT0);
  ea:	e8 98       	cbi	0x1d, 0	; 29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	9c e7       	ldi	r25, 0x7C	; 124
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <framing_error+0x1c>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <framing_error+0x22>
  f6:	00 00       	nop
	_delay_ms(8);
	EIFR |= (1 << INTF0);	 // Clear Interrupt flag
  f8:	e0 9a       	sbi	0x1c, 0	; 28
	EIMSK |= (1 << INT0);
  fa:	e8 9a       	sbi	0x1d, 0	; 29
  fc:	0f 90       	pop	r0
  fe:	0f 90       	pop	r0
 100:	08 95       	ret

00000102 <sendps2>:
	sendps2(0xFE,0); // Inform the KBD of the Parity error and request a resend.
	printf("!P");
}

void sendps2(uint8_t data, uint8_t responseneeded)
{
 102:	ff 92       	push	r15
 104:	0f 93       	push	r16
 106:	1f 93       	push	r17
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	1f 92       	push	r1
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	f8 2e       	mov	r15, r24
/*	Complicated shit to send a PS/2 Packet.
	Begin the request by making both inputs outputs, drag clock low for at least 100us then take data low and release clock.
	the device will soon after start clocking in the data so make clk an input again and pay attention to the interrupt.
	The device will clock in 1 start bit, 8 data bits, 1 parity bit then 1 stop bit. It will then ack by taking data low on the 12th clk (though this is currently ignored) and then it will respond with an 0xFA ACK */
	uint8_t send_tries = 3;
	scancode = 0;
 114:	10 92 d9 01 	sts	0x01D9, r1
 118:	03 e0       	ldi	r16, 0x03	; 3
		PORTD &= ~(1 << PD3);
		PORTD |= (1 << PD2);
		DDRD &= ~(1 << DDD2);
		EIFR |= (1 << INTF0);
		EIMSK |= (1 << INT0);
		sr = 1;
 11a:	11 e0       	ldi	r17, 0x01	; 1
	The device will clock in 1 start bit, 8 data bits, 1 parity bit then 1 stop bit. It will then ack by taking data low on the 12th clk (though this is currently ignored) and then it will respond with an 0xFA ACK */
	uint8_t send_tries = 3;
	scancode = 0;
	do
	{
		send_byte = data;
 11c:	f0 92 dd 01 	sts	0x01DD, r15
		send_parity = calc_parity(send_byte);
 120:	80 91 dd 01 	lds	r24, 0x01DD
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	69 83       	std	Y+1, r22	; 0x01
 128:	0e 94 53 00 	call	0xa6	; 0xa6 <calc_parity>
 12c:	80 93 de 01 	sts	0x01DE, r24
		EIMSK &= ~(1 << INT0);
 130:	e8 98       	cbi	0x1d, 0	; 29
		DDRD |= (1 << DDD2 | 1 << DDD3);
 132:	9a b1       	in	r25, 0x0a	; 10
 134:	9c 60       	ori	r25, 0x0C	; 12
 136:	9a b9       	out	0x0a, r25	; 10
		PORTD &= ~(1 << PD2);
 138:	5a 98       	cbi	0x0b, 2	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	8f e1       	ldi	r24, 0x1F	; 31
 13c:	93 e0       	ldi	r25, 0x03	; 3
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <sendps2+0x3c>
 142:	00 c0       	rjmp	.+0      	; 0x144 <sendps2+0x42>
 144:	00 00       	nop
		_delay_us(200);
		PORTD &= ~(1 << PD3);
 146:	5b 98       	cbi	0x0b, 3	; 11
		PORTD |= (1 << PD2);
 148:	5a 9a       	sbi	0x0b, 2	; 11
		DDRD &= ~(1 << DDD2);
 14a:	52 98       	cbi	0x0a, 2	; 10
		EIFR |= (1 << INTF0);
 14c:	e0 9a       	sbi	0x1c, 0	; 28
		EIMSK |= (1 << INT0);
 14e:	e8 9a       	sbi	0x1d, 0	; 29
		sr = 1;
 150:	10 93 d6 01 	sts	0x01D6, r17
 154:	69 81       	ldd	r22, Y+1	; 0x01
		while (sr == 1) {}
 156:	80 91 d6 01 	lds	r24, 0x01D6
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	e1 f3       	breq	.-8      	; 0x156 <sendps2+0x54>
		DDRD &= ~(1 << DDD2 | 1 << DDD3);
 15e:	9a b1       	in	r25, 0x0a	; 10
 160:	93 7f       	andi	r25, 0xF3	; 243
 162:	9a b9       	out	0x0a, r25	; 10
		while (strobe == 0) {} // Wait for ACK packet before proceeding
 164:	80 91 d8 01 	lds	r24, 0x01D8
 168:	88 23       	and	r24, r24
 16a:	e1 f3       	breq	.-8      	; 0x164 <sendps2+0x62>
		strobe = 0;
 16c:	10 92 d8 01 	sts	0x01D8, r1
 170:	01 50       	subi	r16, 0x01	; 1
		send_tries--;
	}	while ((send_tries) && (scancode != 0xFA));
 172:	21 f0       	breq	.+8      	; 0x17c <sendps2+0x7a>
 174:	80 91 d9 01 	lds	r24, 0x01D9
 178:	8a 3f       	cpi	r24, 0xFA	; 250
 17a:	81 f6       	brne	.-96     	; 0x11c <sendps2+0x1a>

	if (responseneeded) // Are we expecting a response besides ACK?
 17c:	66 23       	and	r22, r22
 17e:	31 f0       	breq	.+12     	; 0x18c <sendps2+0x8a>
	{
		while (strobe == 0) {}
 180:	80 91 d8 01 	lds	r24, 0x01D8
 184:	88 23       	and	r24, r24
 186:	e1 f3       	breq	.-8      	; 0x180 <sendps2+0x7e>
		strobe = 0;	
 188:	10 92 d8 01 	sts	0x01D8, r1
	}
}
 18c:	0f 90       	pop	r0
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	ff 90       	pop	r15
 198:	08 95       	ret

0000019a <parity_error>:
	EIMSK |= (1 << INT0);
}

void parity_error()
{	
	parity_errors++;
 19a:	80 91 d5 01 	lds	r24, 0x01D5
 19e:	8f 5f       	subi	r24, 0xFF	; 255
 1a0:	80 93 d5 01 	sts	0x01D5, r24
	sendps2(0xFE,0); // Inform the KBD of the Parity error and request a resend.
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	8e ef       	ldi	r24, 0xFE	; 254
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 81 00 	call	0x102	; 0x102 <sendps2>
	printf("!P");
 1b0:	85 e8       	ldi	r24, 0x85	; 133
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	9f 93       	push	r25
 1b6:	8f 93       	push	r24
 1b8:	0e 94 3d 02 	call	0x47a	; 0x47a <printf>
 1bc:	0f 90       	pop	r0
 1be:	0f 90       	pop	r0
 1c0:	08 95       	ret

000001c2 <__vector_1>:
		strobe = 0;	
	}
}

ISR (INT0_vect)
{
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	2f 93       	push	r18
 1ce:	3f 93       	push	r19
 1d0:	4f 93       	push	r20
 1d2:	5f 93       	push	r21
 1d4:	6f 93       	push	r22
 1d6:	7f 93       	push	r23
 1d8:	8f 93       	push	r24
 1da:	9f 93       	push	r25
 1dc:	af 93       	push	r26
 1de:	bf 93       	push	r27
 1e0:	ef 93       	push	r30
 1e2:	ff 93       	push	r31
if (sr == 1) { //Send bytes to device.
 1e4:	80 91 d6 01 	lds	r24, 0x01D6
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	89 f5       	brne	.+98     	; 0x24e <__vector_1+0x8c>
	if (send_bitcount >=0 && send_bitcount <=7)
 1ec:	80 91 da 01 	lds	r24, 0x01DA
 1f0:	80 91 da 01 	lds	r24, 0x01DA
 1f4:	88 30       	cpi	r24, 0x08	; 8
 1f6:	68 f4       	brcc	.+26     	; 0x212 <__vector_1+0x50>
	{
		if ((send_byte >> send_bitcount) & 1) {
 1f8:	80 91 dd 01 	lds	r24, 0x01DD
 1fc:	20 91 da 01 	lds	r18, 0x01DA
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <__vector_1+0x46>
 204:	95 95       	asr	r25
 206:	87 95       	ror	r24
 208:	2a 95       	dec	r18
 20a:	e2 f7       	brpl	.-8      	; 0x204 <__vector_1+0x42>
 20c:	80 ff       	sbrs	r24, 0
 20e:	09 c0       	rjmp	.+18     	; 0x222 <__vector_1+0x60>
 210:	0e c0       	rjmp	.+28     	; 0x22e <__vector_1+0x6c>
		else
		{
			PORTD &= ~(1 << PD3);
		}
	}
	else if (send_bitcount == 8)
 212:	80 91 da 01 	lds	r24, 0x01DA
 216:	88 30       	cpi	r24, 0x08	; 8
 218:	31 f4       	brne	.+12     	; 0x226 <__vector_1+0x64>
	{	
		if (send_parity)
 21a:	80 91 de 01 	lds	r24, 0x01DE
 21e:	88 23       	and	r24, r24
 220:	31 f0       	breq	.+12     	; 0x22e <__vector_1+0x6c>
		{
			PORTD &= ~(1 << PD3);
 222:	5b 98       	cbi	0x0b, 3	; 11
 224:	05 c0       	rjmp	.+10     	; 0x230 <__vector_1+0x6e>
		else
		{
			PORTD |= (1 << PD3);
		}
	}
	else if (send_bitcount == 9)
 226:	80 91 da 01 	lds	r24, 0x01DA
 22a:	89 30       	cpi	r24, 0x09	; 9
 22c:	09 f4       	brne	.+2      	; 0x230 <__vector_1+0x6e>
	{
		PORTD |= (1 << PD3);
 22e:	5b 9a       	sbi	0x0b, 3	; 11
	}
	if (send_bitcount < 10)
 230:	80 91 da 01 	lds	r24, 0x01DA
 234:	8a 30       	cpi	r24, 0x0A	; 10
 236:	30 f4       	brcc	.+12     	; 0x244 <__vector_1+0x82>
	{
		send_bitcount++;
 238:	80 91 da 01 	lds	r24, 0x01DA
 23c:	8f 5f       	subi	r24, 0xFF	; 255
 23e:	80 93 da 01 	sts	0x01DA, r24
 242:	68 c0       	rjmp	.+208    	; 0x314 <__vector_1+0x152>
	}
	else
	{
		send_bitcount = 0;
 244:	10 92 da 01 	sts	0x01DA, r1
		sr = 0;
 248:	10 92 d6 01 	sts	0x01D6, r1
 24c:	63 c0       	rjmp	.+198    	; 0x314 <__vector_1+0x152>
}

else { // Receive from device
uint8_t result = 0;

	if (PIND & (1 << PD3)) 
 24e:	89 b1       	in	r24, 0x09	; 9
 250:	83 fb       	bst	r24, 3
 252:	88 27       	eor	r24, r24
 254:	80 f9       	bld	r24, 0
		result = 1;
	}
	else {
		result = 0;
	}
if (rcv_bitcount <=9) 
 256:	90 91 db 01 	lds	r25, 0x01DB
 25a:	9a 30       	cpi	r25, 0x0A	; 10
 25c:	58 f5       	brcc	.+86     	; 0x2b4 <__vector_1+0xf2>
{
	if (rcv_bitcount >=1 && rcv_bitcount <= 8) 
 25e:	90 91 db 01 	lds	r25, 0x01DB
 262:	99 23       	and	r25, r25
 264:	91 f0       	breq	.+36     	; 0x28a <__vector_1+0xc8>
 266:	90 91 db 01 	lds	r25, 0x01DB
 26a:	99 30       	cpi	r25, 0x09	; 9
 26c:	70 f4       	brcc	.+28     	; 0x28a <__vector_1+0xc8>
	{
		rcv_byte |= (result << (rcv_bitcount - 1));
 26e:	20 91 dc 01 	lds	r18, 0x01DC
 272:	30 91 db 01 	lds	r19, 0x01DB
 276:	31 50       	subi	r19, 0x01	; 1
 278:	03 2e       	mov	r0, r19
 27a:	01 c0       	rjmp	.+2      	; 0x27e <__vector_1+0xbc>
 27c:	88 0f       	add	r24, r24
 27e:	0a 94       	dec	r0
 280:	ea f7       	brpl	.-6      	; 0x27c <__vector_1+0xba>
 282:	28 2b       	or	r18, r24
 284:	20 93 dc 01 	sts	0x01DC, r18
 288:	0f c0       	rjmp	.+30     	; 0x2a8 <__vector_1+0xe6>
	}
	else if (rcv_bitcount == 0)
 28a:	90 91 db 01 	lds	r25, 0x01DB
 28e:	99 23       	and	r25, r25
 290:	49 f0       	breq	.+18     	; 0x2a4 <__vector_1+0xe2>
	{
		ssp = result; // Start Bit
	}
	else if (rcv_bitcount == 9)
 292:	90 91 db 01 	lds	r25, 0x01DB
 296:	99 30       	cpi	r25, 0x09	; 9
 298:	39 f4       	brne	.+14     	; 0x2a8 <__vector_1+0xe6>
	{
		ssp |= (result << 2); // Parity Bit
 29a:	90 91 d7 01 	lds	r25, 0x01D7
 29e:	88 0f       	add	r24, r24
 2a0:	88 0f       	add	r24, r24
 2a2:	89 2b       	or	r24, r25
 2a4:	80 93 d7 01 	sts	0x01D7, r24
	}
	rcv_bitcount++;
 2a8:	80 91 db 01 	lds	r24, 0x01DB
 2ac:	8f 5f       	subi	r24, 0xFF	; 255
 2ae:	80 93 db 01 	sts	0x01DB, r24
 2b2:	30 c0       	rjmp	.+96     	; 0x314 <__vector_1+0x152>
}
	else if (rcv_bitcount >= 10) 
 2b4:	90 91 db 01 	lds	r25, 0x01DB
 2b8:	9a 30       	cpi	r25, 0x0A	; 10
 2ba:	60 f1       	brcs	.+88     	; 0x314 <__vector_1+0x152>
	{
		ssp |= (result << 1); // Stop Bit
 2bc:	90 91 d7 01 	lds	r25, 0x01D7
 2c0:	88 0f       	add	r24, r24
 2c2:	89 2b       	or	r24, r25
 2c4:	80 93 d7 01 	sts	0x01D7, r24
		if ((ssp & 0x2) != 0x02) // Check start and stop bits.
 2c8:	80 91 d7 01 	lds	r24, 0x01D7
 2cc:	81 fd       	sbrc	r24, 1
 2ce:	05 c0       	rjmp	.+10     	; 0x2da <__vector_1+0x118>
		{
			framing_error(ssp);
 2d0:	80 91 d7 01 	lds	r24, 0x01D7
 2d4:	0e 94 6a 00 	call	0xd4	; 0xd4 <framing_error>
 2d8:	19 c0       	rjmp	.+50     	; 0x30c <__vector_1+0x14a>
		} 
		else if (calc_parity(rcv_byte) == (ssp >> 2))
 2da:	80 91 dc 01 	lds	r24, 0x01DC
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 53 00 	call	0xa6	; 0xa6 <calc_parity>
 2e4:	20 91 d7 01 	lds	r18, 0x01D7
 2e8:	26 95       	lsr	r18
 2ea:	26 95       	lsr	r18
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	82 17       	cp	r24, r18
 2f0:	93 07       	cpc	r25, r19
 2f2:	29 f4       	brne	.+10     	; 0x2fe <__vector_1+0x13c>
		{
			parity_error();
 2f4:	0e 94 cd 00 	call	0x19a	; 0x19a <parity_error>
			strobe = 0;
 2f8:	10 92 d8 01 	sts	0x01D8, r1
 2fc:	07 c0       	rjmp	.+14     	; 0x30c <__vector_1+0x14a>
		}
		else 
		{
			scancode = rcv_byte;
 2fe:	80 91 dc 01 	lds	r24, 0x01DC
 302:	80 93 d9 01 	sts	0x01D9, r24
			strobe = 1;
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	80 93 d8 01 	sts	0x01D8, r24
		}
		rcv_bitcount = 0;
 30c:	10 92 db 01 	sts	0x01DB, r1
		rcv_byte = 0;
 310:	10 92 dc 01 	sts	0x01DC, r1
		result = 0;
	} 

}

}
 314:	ff 91       	pop	r31
 316:	ef 91       	pop	r30
 318:	bf 91       	pop	r27
 31a:	af 91       	pop	r26
 31c:	9f 91       	pop	r25
 31e:	8f 91       	pop	r24
 320:	7f 91       	pop	r23
 322:	6f 91       	pop	r22
 324:	5f 91       	pop	r21
 326:	4f 91       	pop	r20
 328:	3f 91       	pop	r19
 32a:	2f 91       	pop	r18
 32c:	0f 90       	pop	r0
 32e:	0f be       	out	0x3f, r0	; 63
 330:	0f 90       	pop	r0
 332:	1f 90       	pop	r1
 334:	18 95       	reti

00000336 <uart_init>:
#include <util/setbaud.h>

/* http://www.cs.mun.ca/~rod/Winter2007/4723/notes/serial/serial.html */

void uart_init(void) {
    UBRR0H = UBRRH_VALUE;
 336:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = UBRRL_VALUE;
 33a:	83 e3       	ldi	r24, 0x33	; 51
 33c:	80 93 c4 00 	sts	0x00C4, r24
    
#if USE_2X
    UCSR0A |= _BV(U2X0);
#else
    UCSR0A &= ~(_BV(U2X0));
 340:	e0 ec       	ldi	r30, 0xC0	; 192
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	8d 7f       	andi	r24, 0xFD	; 253
 348:	80 83       	st	Z, r24
#endif

    UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */ 
 34a:	86 e0       	ldi	r24, 0x06	; 6
 34c:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */    
 350:	88 e1       	ldi	r24, 0x18	; 24
 352:	80 93 c1 00 	sts	0x00C1, r24
 356:	08 95       	ret

00000358 <uart_putchar>:
}

void uart_putchar(char c, FILE *stream) {
 358:	cf 93       	push	r28
 35a:	c8 2f       	mov	r28, r24
    if (c == '\n') {
 35c:	8a 30       	cpi	r24, 0x0A	; 10
 35e:	19 f4       	brne	.+6      	; 0x366 <uart_putchar+0xe>
        uart_putchar('\r', stream);
 360:	8d e0       	ldi	r24, 0x0D	; 13
 362:	0e 94 ac 01 	call	0x358	; 0x358 <uart_putchar>
    }
    loop_until_bit_is_set(UCSR0A, UDRE0);
 366:	80 91 c0 00 	lds	r24, 0x00C0
 36a:	85 ff       	sbrs	r24, 5
 36c:	fc cf       	rjmp	.-8      	; 0x366 <uart_putchar+0xe>
    UDR0 = c;
 36e:	c0 93 c6 00 	sts	0x00C6, r28
}
 372:	cf 91       	pop	r28
 374:	08 95       	ret

00000376 <uart_getchar>:

char uart_getchar(FILE *stream) {
    loop_until_bit_is_set(UCSR0A, RXC0);
 376:	80 91 c0 00 	lds	r24, 0x00C0
 37a:	87 ff       	sbrs	r24, 7
 37c:	fc cf       	rjmp	.-8      	; 0x376 <uart_getchar>
    return UDR0;
 37e:	80 91 c6 00 	lds	r24, 0x00C6
}
 382:	08 95       	ret

00000384 <main>:


int main (void) {
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	00 d0       	rcall	.+0      	; 0x38a <main+0x6>
 38a:	1f 92       	push	r1
 38c:	cd b7       	in	r28, 0x3d	; 61
 38e:	de b7       	in	r29, 0x3e	; 62
volatile uint8_t kbd_curr_cmd = 0;
 390:	1b 82       	std	Y+3, r1	; 0x03
volatile uint8_t kbd_lights = 0;
 392:	1a 82       	std	Y+2, r1	; 0x02
volatile uint8_t last_cmd = 0;
 394:	19 82       	std	Y+1, r1	; 0x01
DDRD &= ~(1 << DDD2 | 1 << DDD3);
 396:	8a b1       	in	r24, 0x0a	; 10
 398:	83 7f       	andi	r24, 0xF3	; 243
 39a:	8a b9       	out	0x0a, r24	; 10
EICRA |= (1 << ISC01);
 39c:	80 91 69 00 	lds	r24, 0x0069
 3a0:	82 60       	ori	r24, 0x02	; 2
 3a2:	80 93 69 00 	sts	0x0069, r24
EIMSK |= (1 << INT0);
 3a6:	e8 9a       	sbi	0x1d, 0	; 29
uart_init();
 3a8:	0e 94 9b 01 	call	0x336	; 0x336 <uart_init>
stdout = &uart_output;
 3ac:	8e e0       	ldi	r24, 0x0E	; 14
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	90 93 e2 01 	sts	0x01E2, r25
 3b4:	80 93 e1 01 	sts	0x01E1, r24
stdin  = &uart_input;
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	90 93 e0 01 	sts	0x01E0, r25
 3c0:	80 93 df 01 	sts	0x01DF, r24
printf("Startup Completed. \r\n");
 3c4:	88 e8       	ldi	r24, 0x88	; 136
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	0e 94 51 02 	call	0x4a2	; 0x4a2 <puts>

sei();
 3cc:	78 94       	sei
sendps2(0xff,1); // reset kbd
 3ce:	61 e0       	ldi	r22, 0x01	; 1
 3d0:	8f ef       	ldi	r24, 0xFF	; 255
 3d2:	0e 94 81 00 	call	0x102	; 0x102 <sendps2>
printf("Keyboard Self-test completed: 0x%x\r\n", scancode);
 3d6:	80 91 d9 01 	lds	r24, 0x01D9
 3da:	1f 92       	push	r1
 3dc:	8f 93       	push	r24
 3de:	8d e9       	ldi	r24, 0x9D	; 157
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	9f 93       	push	r25
 3e4:	8f 93       	push	r24
 3e6:	0e 94 3d 02 	call	0x47a	; 0x47a <printf>
sendps2(0xf0,0); // Set Codeset 
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	80 ef       	ldi	r24, 0xF0	; 240
 3ee:	0e 94 81 00 	call	0x102	; 0x102 <sendps2>
sendps2(0x02,0); // Codeset 2
 3f2:	60 e0       	ldi	r22, 0x00	; 0
 3f4:	82 e0       	ldi	r24, 0x02	; 2
 3f6:	0e 94 81 00 	call	0x102	; 0x102 <sendps2>
 3fa:	0f 90       	pop	r0
 3fc:	0f 90       	pop	r0
 3fe:	0f 90       	pop	r0
 400:	0f 90       	pop	r0
				sendps2(0xed,0);
				sendps2(kbd_lights,0);
			}
			else if (scancode != 0xf0)
			{
				printf("Scancode: %x %x\r\n", scancode, kbd_curr_cmd);
 402:	02 ec       	ldi	r16, 0xC2	; 194
 404:	11 e0       	ldi	r17, 0x01	; 1
	while (1) {
		if (strobe)
		{
			if (scancode == 0x52 && kbd_curr_cmd == 0)
			{
				kbd_lights ^= 1 << 2;
 406:	e4 e0       	ldi	r30, 0x04	; 4
 408:	fe 2e       	mov	r15, r30
			else if (scancode != 0xf0)
			{
				printf("Scancode: %x %x\r\n", scancode, kbd_curr_cmd);
			}
			if (scancode == 0xf0) {
				kbd_curr_cmd = 1; //key_up
 40a:	ee 24       	eor	r14, r14
 40c:	e3 94       	inc	r14
printf("Keyboard Self-test completed: 0x%x\r\n", scancode);
sendps2(0xf0,0); // Set Codeset 
sendps2(0x02,0); // Codeset 2

	while (1) {
		if (strobe)
 40e:	80 91 d8 01 	lds	r24, 0x01D8
 412:	88 23       	and	r24, r24
 414:	e1 f3       	breq	.-8      	; 0x40e <main+0x8a>
		{
			if (scancode == 0x52 && kbd_curr_cmd == 0)
 416:	80 91 d9 01 	lds	r24, 0x01D9
 41a:	82 35       	cpi	r24, 0x52	; 82
 41c:	79 f4       	brne	.+30     	; 0x43c <main+0xb8>
 41e:	8b 81       	ldd	r24, Y+3	; 0x03
 420:	81 11       	cpse	r24, r1
 422:	0c c0       	rjmp	.+24     	; 0x43c <main+0xb8>
			{
				kbd_lights ^= 1 << 2;
 424:	8a 81       	ldd	r24, Y+2	; 0x02
 426:	8f 25       	eor	r24, r15
 428:	8a 83       	std	Y+2, r24	; 0x02
				sendps2(0xed,0);
 42a:	60 e0       	ldi	r22, 0x00	; 0
 42c:	8d ee       	ldi	r24, 0xED	; 237
 42e:	0e 94 81 00 	call	0x102	; 0x102 <sendps2>
				sendps2(kbd_lights,0);
 432:	8a 81       	ldd	r24, Y+2	; 0x02
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	0e 94 81 00 	call	0x102	; 0x102 <sendps2>
 43a:	15 c0       	rjmp	.+42     	; 0x466 <main+0xe2>
			}
			else if (scancode != 0xf0)
 43c:	80 91 d9 01 	lds	r24, 0x01D9
 440:	80 3f       	cpi	r24, 0xF0	; 240
 442:	89 f0       	breq	.+34     	; 0x466 <main+0xe2>
			{
				printf("Scancode: %x %x\r\n", scancode, kbd_curr_cmd);
 444:	9b 81       	ldd	r25, Y+3	; 0x03
 446:	80 91 d9 01 	lds	r24, 0x01D9
 44a:	1f 92       	push	r1
 44c:	9f 93       	push	r25
 44e:	1f 92       	push	r1
 450:	8f 93       	push	r24
 452:	1f 93       	push	r17
 454:	0f 93       	push	r16
 456:	0e 94 3d 02 	call	0x47a	; 0x47a <printf>
 45a:	0f 90       	pop	r0
 45c:	0f 90       	pop	r0
 45e:	0f 90       	pop	r0
 460:	0f 90       	pop	r0
 462:	0f 90       	pop	r0
 464:	0f 90       	pop	r0
			}
			if (scancode == 0xf0) {
 466:	80 91 d9 01 	lds	r24, 0x01D9
 46a:	80 3f       	cpi	r24, 0xF0	; 240
 46c:	11 f4       	brne	.+4      	; 0x472 <main+0xee>
				kbd_curr_cmd = 1; //key_up
 46e:	eb 82       	std	Y+3, r14	; 0x03
 470:	01 c0       	rjmp	.+2      	; 0x474 <main+0xf0>
			}
			else 
			{
				kbd_curr_cmd = 0; //key_down
 472:	1b 82       	std	Y+3, r1	; 0x03
			}
			strobe = 0;
 474:	10 92 d8 01 	sts	0x01D8, r1
 478:	ca cf       	rjmp	.-108    	; 0x40e <main+0x8a>

0000047a <printf>:
 47a:	a0 e0       	ldi	r26, 0x00	; 0
 47c:	b0 e0       	ldi	r27, 0x00	; 0
 47e:	e3 e4       	ldi	r30, 0x43	; 67
 480:	f2 e0       	ldi	r31, 0x02	; 2
 482:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__prologue_saves__+0x20>
 486:	fe 01       	movw	r30, r28
 488:	35 96       	adiw	r30, 0x05	; 5
 48a:	61 91       	ld	r22, Z+
 48c:	71 91       	ld	r23, Z+
 48e:	af 01       	movw	r20, r30
 490:	80 91 e1 01 	lds	r24, 0x01E1
 494:	90 91 e2 01 	lds	r25, 0x01E2
 498:	0e 94 7e 02 	call	0x4fc	; 0x4fc <vfprintf>
 49c:	e2 e0       	ldi	r30, 0x02	; 2
 49e:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__epilogue_restores__+0x20>

000004a2 <puts>:
 4a2:	0f 93       	push	r16
 4a4:	1f 93       	push	r17
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
 4aa:	e0 91 e1 01 	lds	r30, 0x01E1
 4ae:	f0 91 e2 01 	lds	r31, 0x01E2
 4b2:	23 81       	ldd	r18, Z+3	; 0x03
 4b4:	21 ff       	sbrs	r18, 1
 4b6:	1b c0       	rjmp	.+54     	; 0x4ee <puts+0x4c>
 4b8:	ec 01       	movw	r28, r24
 4ba:	00 e0       	ldi	r16, 0x00	; 0
 4bc:	10 e0       	ldi	r17, 0x00	; 0
 4be:	89 91       	ld	r24, Y+
 4c0:	60 91 e1 01 	lds	r22, 0x01E1
 4c4:	70 91 e2 01 	lds	r23, 0x01E2
 4c8:	db 01       	movw	r26, r22
 4ca:	18 96       	adiw	r26, 0x08	; 8
 4cc:	ed 91       	ld	r30, X+
 4ce:	fc 91       	ld	r31, X
 4d0:	19 97       	sbiw	r26, 0x09	; 9
 4d2:	88 23       	and	r24, r24
 4d4:	31 f0       	breq	.+12     	; 0x4e2 <puts+0x40>
 4d6:	09 95       	icall
 4d8:	89 2b       	or	r24, r25
 4da:	89 f3       	breq	.-30     	; 0x4be <puts+0x1c>
 4dc:	0f ef       	ldi	r16, 0xFF	; 255
 4de:	1f ef       	ldi	r17, 0xFF	; 255
 4e0:	ee cf       	rjmp	.-36     	; 0x4be <puts+0x1c>
 4e2:	8a e0       	ldi	r24, 0x0A	; 10
 4e4:	09 95       	icall
 4e6:	89 2b       	or	r24, r25
 4e8:	11 f4       	brne	.+4      	; 0x4ee <puts+0x4c>
 4ea:	c8 01       	movw	r24, r16
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <puts+0x50>
 4ee:	8f ef       	ldi	r24, 0xFF	; 255
 4f0:	9f ef       	ldi	r25, 0xFF	; 255
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	1f 91       	pop	r17
 4f8:	0f 91       	pop	r16
 4fa:	08 95       	ret

000004fc <vfprintf>:
 4fc:	ac e0       	ldi	r26, 0x0C	; 12
 4fe:	b0 e0       	ldi	r27, 0x00	; 0
 500:	e4 e8       	ldi	r30, 0x84	; 132
 502:	f2 e0       	ldi	r31, 0x02	; 2
 504:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <__prologue_saves__>
 508:	7c 01       	movw	r14, r24
 50a:	6b 01       	movw	r12, r22
 50c:	8a 01       	movw	r16, r20
 50e:	fc 01       	movw	r30, r24
 510:	17 82       	std	Z+7, r1	; 0x07
 512:	16 82       	std	Z+6, r1	; 0x06
 514:	83 81       	ldd	r24, Z+3	; 0x03
 516:	81 ff       	sbrs	r24, 1
 518:	bd c1       	rjmp	.+890    	; 0x894 <vfprintf+0x398>
 51a:	ce 01       	movw	r24, r28
 51c:	01 96       	adiw	r24, 0x01	; 1
 51e:	4c 01       	movw	r8, r24
 520:	f7 01       	movw	r30, r14
 522:	93 81       	ldd	r25, Z+3	; 0x03
 524:	f6 01       	movw	r30, r12
 526:	93 fd       	sbrc	r25, 3
 528:	85 91       	lpm	r24, Z+
 52a:	93 ff       	sbrs	r25, 3
 52c:	81 91       	ld	r24, Z+
 52e:	6f 01       	movw	r12, r30
 530:	88 23       	and	r24, r24
 532:	09 f4       	brne	.+2      	; 0x536 <vfprintf+0x3a>
 534:	ab c1       	rjmp	.+854    	; 0x88c <vfprintf+0x390>
 536:	85 32       	cpi	r24, 0x25	; 37
 538:	39 f4       	brne	.+14     	; 0x548 <vfprintf+0x4c>
 53a:	93 fd       	sbrc	r25, 3
 53c:	85 91       	lpm	r24, Z+
 53e:	93 ff       	sbrs	r25, 3
 540:	81 91       	ld	r24, Z+
 542:	6f 01       	movw	r12, r30
 544:	85 32       	cpi	r24, 0x25	; 37
 546:	29 f4       	brne	.+10     	; 0x552 <vfprintf+0x56>
 548:	b7 01       	movw	r22, r14
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	0e 94 66 04 	call	0x8cc	; 0x8cc <fputc>
 550:	e7 cf       	rjmp	.-50     	; 0x520 <vfprintf+0x24>
 552:	51 2c       	mov	r5, r1
 554:	31 2c       	mov	r3, r1
 556:	20 e0       	ldi	r18, 0x00	; 0
 558:	20 32       	cpi	r18, 0x20	; 32
 55a:	a0 f4       	brcc	.+40     	; 0x584 <vfprintf+0x88>
 55c:	8b 32       	cpi	r24, 0x2B	; 43
 55e:	69 f0       	breq	.+26     	; 0x57a <vfprintf+0x7e>
 560:	30 f4       	brcc	.+12     	; 0x56e <vfprintf+0x72>
 562:	80 32       	cpi	r24, 0x20	; 32
 564:	59 f0       	breq	.+22     	; 0x57c <vfprintf+0x80>
 566:	83 32       	cpi	r24, 0x23	; 35
 568:	69 f4       	brne	.+26     	; 0x584 <vfprintf+0x88>
 56a:	20 61       	ori	r18, 0x10	; 16
 56c:	2c c0       	rjmp	.+88     	; 0x5c6 <vfprintf+0xca>
 56e:	8d 32       	cpi	r24, 0x2D	; 45
 570:	39 f0       	breq	.+14     	; 0x580 <vfprintf+0x84>
 572:	80 33       	cpi	r24, 0x30	; 48
 574:	39 f4       	brne	.+14     	; 0x584 <vfprintf+0x88>
 576:	21 60       	ori	r18, 0x01	; 1
 578:	26 c0       	rjmp	.+76     	; 0x5c6 <vfprintf+0xca>
 57a:	22 60       	ori	r18, 0x02	; 2
 57c:	24 60       	ori	r18, 0x04	; 4
 57e:	23 c0       	rjmp	.+70     	; 0x5c6 <vfprintf+0xca>
 580:	28 60       	ori	r18, 0x08	; 8
 582:	21 c0       	rjmp	.+66     	; 0x5c6 <vfprintf+0xca>
 584:	27 fd       	sbrc	r18, 7
 586:	27 c0       	rjmp	.+78     	; 0x5d6 <vfprintf+0xda>
 588:	30 ed       	ldi	r19, 0xD0	; 208
 58a:	38 0f       	add	r19, r24
 58c:	3a 30       	cpi	r19, 0x0A	; 10
 58e:	78 f4       	brcc	.+30     	; 0x5ae <vfprintf+0xb2>
 590:	26 ff       	sbrs	r18, 6
 592:	06 c0       	rjmp	.+12     	; 0x5a0 <vfprintf+0xa4>
 594:	fa e0       	ldi	r31, 0x0A	; 10
 596:	5f 9e       	mul	r5, r31
 598:	30 0d       	add	r19, r0
 59a:	11 24       	eor	r1, r1
 59c:	53 2e       	mov	r5, r19
 59e:	13 c0       	rjmp	.+38     	; 0x5c6 <vfprintf+0xca>
 5a0:	8a e0       	ldi	r24, 0x0A	; 10
 5a2:	38 9e       	mul	r3, r24
 5a4:	30 0d       	add	r19, r0
 5a6:	11 24       	eor	r1, r1
 5a8:	33 2e       	mov	r3, r19
 5aa:	20 62       	ori	r18, 0x20	; 32
 5ac:	0c c0       	rjmp	.+24     	; 0x5c6 <vfprintf+0xca>
 5ae:	8e 32       	cpi	r24, 0x2E	; 46
 5b0:	21 f4       	brne	.+8      	; 0x5ba <vfprintf+0xbe>
 5b2:	26 fd       	sbrc	r18, 6
 5b4:	6b c1       	rjmp	.+726    	; 0x88c <vfprintf+0x390>
 5b6:	20 64       	ori	r18, 0x40	; 64
 5b8:	06 c0       	rjmp	.+12     	; 0x5c6 <vfprintf+0xca>
 5ba:	8c 36       	cpi	r24, 0x6C	; 108
 5bc:	11 f4       	brne	.+4      	; 0x5c2 <vfprintf+0xc6>
 5be:	20 68       	ori	r18, 0x80	; 128
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <vfprintf+0xca>
 5c2:	88 36       	cpi	r24, 0x68	; 104
 5c4:	41 f4       	brne	.+16     	; 0x5d6 <vfprintf+0xda>
 5c6:	f6 01       	movw	r30, r12
 5c8:	93 fd       	sbrc	r25, 3
 5ca:	85 91       	lpm	r24, Z+
 5cc:	93 ff       	sbrs	r25, 3
 5ce:	81 91       	ld	r24, Z+
 5d0:	6f 01       	movw	r12, r30
 5d2:	81 11       	cpse	r24, r1
 5d4:	c1 cf       	rjmp	.-126    	; 0x558 <vfprintf+0x5c>
 5d6:	98 2f       	mov	r25, r24
 5d8:	9f 7d       	andi	r25, 0xDF	; 223
 5da:	95 54       	subi	r25, 0x45	; 69
 5dc:	93 30       	cpi	r25, 0x03	; 3
 5de:	28 f4       	brcc	.+10     	; 0x5ea <vfprintf+0xee>
 5e0:	0c 5f       	subi	r16, 0xFC	; 252
 5e2:	1f 4f       	sbci	r17, 0xFF	; 255
 5e4:	ff e3       	ldi	r31, 0x3F	; 63
 5e6:	f9 83       	std	Y+1, r31	; 0x01
 5e8:	0d c0       	rjmp	.+26     	; 0x604 <vfprintf+0x108>
 5ea:	83 36       	cpi	r24, 0x63	; 99
 5ec:	31 f0       	breq	.+12     	; 0x5fa <vfprintf+0xfe>
 5ee:	83 37       	cpi	r24, 0x73	; 115
 5f0:	71 f0       	breq	.+28     	; 0x60e <vfprintf+0x112>
 5f2:	83 35       	cpi	r24, 0x53	; 83
 5f4:	09 f0       	breq	.+2      	; 0x5f8 <vfprintf+0xfc>
 5f6:	5b c0       	rjmp	.+182    	; 0x6ae <vfprintf+0x1b2>
 5f8:	22 c0       	rjmp	.+68     	; 0x63e <vfprintf+0x142>
 5fa:	f8 01       	movw	r30, r16
 5fc:	80 81       	ld	r24, Z
 5fe:	89 83       	std	Y+1, r24	; 0x01
 600:	0e 5f       	subi	r16, 0xFE	; 254
 602:	1f 4f       	sbci	r17, 0xFF	; 255
 604:	44 24       	eor	r4, r4
 606:	43 94       	inc	r4
 608:	51 2c       	mov	r5, r1
 60a:	54 01       	movw	r10, r8
 60c:	15 c0       	rjmp	.+42     	; 0x638 <vfprintf+0x13c>
 60e:	38 01       	movw	r6, r16
 610:	f2 e0       	ldi	r31, 0x02	; 2
 612:	6f 0e       	add	r6, r31
 614:	71 1c       	adc	r7, r1
 616:	f8 01       	movw	r30, r16
 618:	a0 80       	ld	r10, Z
 61a:	b1 80       	ldd	r11, Z+1	; 0x01
 61c:	26 ff       	sbrs	r18, 6
 61e:	03 c0       	rjmp	.+6      	; 0x626 <vfprintf+0x12a>
 620:	65 2d       	mov	r22, r5
 622:	70 e0       	ldi	r23, 0x00	; 0
 624:	02 c0       	rjmp	.+4      	; 0x62a <vfprintf+0x12e>
 626:	6f ef       	ldi	r22, 0xFF	; 255
 628:	7f ef       	ldi	r23, 0xFF	; 255
 62a:	c5 01       	movw	r24, r10
 62c:	2c 87       	std	Y+12, r18	; 0x0c
 62e:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <strnlen>
 632:	2c 01       	movw	r4, r24
 634:	83 01       	movw	r16, r6
 636:	2c 85       	ldd	r18, Y+12	; 0x0c
 638:	2f 77       	andi	r18, 0x7F	; 127
 63a:	22 2e       	mov	r2, r18
 63c:	17 c0       	rjmp	.+46     	; 0x66c <vfprintf+0x170>
 63e:	38 01       	movw	r6, r16
 640:	f2 e0       	ldi	r31, 0x02	; 2
 642:	6f 0e       	add	r6, r31
 644:	71 1c       	adc	r7, r1
 646:	f8 01       	movw	r30, r16
 648:	a0 80       	ld	r10, Z
 64a:	b1 80       	ldd	r11, Z+1	; 0x01
 64c:	26 ff       	sbrs	r18, 6
 64e:	03 c0       	rjmp	.+6      	; 0x656 <vfprintf+0x15a>
 650:	65 2d       	mov	r22, r5
 652:	70 e0       	ldi	r23, 0x00	; 0
 654:	02 c0       	rjmp	.+4      	; 0x65a <vfprintf+0x15e>
 656:	6f ef       	ldi	r22, 0xFF	; 255
 658:	7f ef       	ldi	r23, 0xFF	; 255
 65a:	c5 01       	movw	r24, r10
 65c:	2c 87       	std	Y+12, r18	; 0x0c
 65e:	0e 94 50 04 	call	0x8a0	; 0x8a0 <strnlen_P>
 662:	2c 01       	movw	r4, r24
 664:	2c 85       	ldd	r18, Y+12	; 0x0c
 666:	20 68       	ori	r18, 0x80	; 128
 668:	22 2e       	mov	r2, r18
 66a:	83 01       	movw	r16, r6
 66c:	23 fc       	sbrc	r2, 3
 66e:	1b c0       	rjmp	.+54     	; 0x6a6 <vfprintf+0x1aa>
 670:	83 2d       	mov	r24, r3
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	48 16       	cp	r4, r24
 676:	59 06       	cpc	r5, r25
 678:	b0 f4       	brcc	.+44     	; 0x6a6 <vfprintf+0x1aa>
 67a:	b7 01       	movw	r22, r14
 67c:	80 e2       	ldi	r24, 0x20	; 32
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	0e 94 66 04 	call	0x8cc	; 0x8cc <fputc>
 684:	3a 94       	dec	r3
 686:	f4 cf       	rjmp	.-24     	; 0x670 <vfprintf+0x174>
 688:	f5 01       	movw	r30, r10
 68a:	27 fc       	sbrc	r2, 7
 68c:	85 91       	lpm	r24, Z+
 68e:	27 fe       	sbrs	r2, 7
 690:	81 91       	ld	r24, Z+
 692:	5f 01       	movw	r10, r30
 694:	b7 01       	movw	r22, r14
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	0e 94 66 04 	call	0x8cc	; 0x8cc <fputc>
 69c:	31 10       	cpse	r3, r1
 69e:	3a 94       	dec	r3
 6a0:	f1 e0       	ldi	r31, 0x01	; 1
 6a2:	4f 1a       	sub	r4, r31
 6a4:	51 08       	sbc	r5, r1
 6a6:	41 14       	cp	r4, r1
 6a8:	51 04       	cpc	r5, r1
 6aa:	71 f7       	brne	.-36     	; 0x688 <vfprintf+0x18c>
 6ac:	e5 c0       	rjmp	.+458    	; 0x878 <vfprintf+0x37c>
 6ae:	84 36       	cpi	r24, 0x64	; 100
 6b0:	11 f0       	breq	.+4      	; 0x6b6 <vfprintf+0x1ba>
 6b2:	89 36       	cpi	r24, 0x69	; 105
 6b4:	39 f5       	brne	.+78     	; 0x704 <vfprintf+0x208>
 6b6:	f8 01       	movw	r30, r16
 6b8:	27 ff       	sbrs	r18, 7
 6ba:	07 c0       	rjmp	.+14     	; 0x6ca <vfprintf+0x1ce>
 6bc:	60 81       	ld	r22, Z
 6be:	71 81       	ldd	r23, Z+1	; 0x01
 6c0:	82 81       	ldd	r24, Z+2	; 0x02
 6c2:	93 81       	ldd	r25, Z+3	; 0x03
 6c4:	0c 5f       	subi	r16, 0xFC	; 252
 6c6:	1f 4f       	sbci	r17, 0xFF	; 255
 6c8:	08 c0       	rjmp	.+16     	; 0x6da <vfprintf+0x1de>
 6ca:	60 81       	ld	r22, Z
 6cc:	71 81       	ldd	r23, Z+1	; 0x01
 6ce:	88 27       	eor	r24, r24
 6d0:	77 fd       	sbrc	r23, 7
 6d2:	80 95       	com	r24
 6d4:	98 2f       	mov	r25, r24
 6d6:	0e 5f       	subi	r16, 0xFE	; 254
 6d8:	1f 4f       	sbci	r17, 0xFF	; 255
 6da:	2f 76       	andi	r18, 0x6F	; 111
 6dc:	b2 2e       	mov	r11, r18
 6de:	97 ff       	sbrs	r25, 7
 6e0:	09 c0       	rjmp	.+18     	; 0x6f4 <vfprintf+0x1f8>
 6e2:	90 95       	com	r25
 6e4:	80 95       	com	r24
 6e6:	70 95       	com	r23
 6e8:	61 95       	neg	r22
 6ea:	7f 4f       	sbci	r23, 0xFF	; 255
 6ec:	8f 4f       	sbci	r24, 0xFF	; 255
 6ee:	9f 4f       	sbci	r25, 0xFF	; 255
 6f0:	20 68       	ori	r18, 0x80	; 128
 6f2:	b2 2e       	mov	r11, r18
 6f4:	2a e0       	ldi	r18, 0x0A	; 10
 6f6:	30 e0       	ldi	r19, 0x00	; 0
 6f8:	a4 01       	movw	r20, r8
 6fa:	0e 94 98 04 	call	0x930	; 0x930 <__ultoa_invert>
 6fe:	a8 2e       	mov	r10, r24
 700:	a8 18       	sub	r10, r8
 702:	44 c0       	rjmp	.+136    	; 0x78c <vfprintf+0x290>
 704:	85 37       	cpi	r24, 0x75	; 117
 706:	29 f4       	brne	.+10     	; 0x712 <vfprintf+0x216>
 708:	2f 7e       	andi	r18, 0xEF	; 239
 70a:	b2 2e       	mov	r11, r18
 70c:	2a e0       	ldi	r18, 0x0A	; 10
 70e:	30 e0       	ldi	r19, 0x00	; 0
 710:	25 c0       	rjmp	.+74     	; 0x75c <vfprintf+0x260>
 712:	f2 2f       	mov	r31, r18
 714:	f9 7f       	andi	r31, 0xF9	; 249
 716:	bf 2e       	mov	r11, r31
 718:	8f 36       	cpi	r24, 0x6F	; 111
 71a:	c1 f0       	breq	.+48     	; 0x74c <vfprintf+0x250>
 71c:	18 f4       	brcc	.+6      	; 0x724 <vfprintf+0x228>
 71e:	88 35       	cpi	r24, 0x58	; 88
 720:	79 f0       	breq	.+30     	; 0x740 <vfprintf+0x244>
 722:	b4 c0       	rjmp	.+360    	; 0x88c <vfprintf+0x390>
 724:	80 37       	cpi	r24, 0x70	; 112
 726:	19 f0       	breq	.+6      	; 0x72e <vfprintf+0x232>
 728:	88 37       	cpi	r24, 0x78	; 120
 72a:	21 f0       	breq	.+8      	; 0x734 <vfprintf+0x238>
 72c:	af c0       	rjmp	.+350    	; 0x88c <vfprintf+0x390>
 72e:	2f 2f       	mov	r18, r31
 730:	20 61       	ori	r18, 0x10	; 16
 732:	b2 2e       	mov	r11, r18
 734:	b4 fe       	sbrs	r11, 4
 736:	0d c0       	rjmp	.+26     	; 0x752 <vfprintf+0x256>
 738:	8b 2d       	mov	r24, r11
 73a:	84 60       	ori	r24, 0x04	; 4
 73c:	b8 2e       	mov	r11, r24
 73e:	09 c0       	rjmp	.+18     	; 0x752 <vfprintf+0x256>
 740:	24 ff       	sbrs	r18, 4
 742:	0a c0       	rjmp	.+20     	; 0x758 <vfprintf+0x25c>
 744:	9f 2f       	mov	r25, r31
 746:	96 60       	ori	r25, 0x06	; 6
 748:	b9 2e       	mov	r11, r25
 74a:	06 c0       	rjmp	.+12     	; 0x758 <vfprintf+0x25c>
 74c:	28 e0       	ldi	r18, 0x08	; 8
 74e:	30 e0       	ldi	r19, 0x00	; 0
 750:	05 c0       	rjmp	.+10     	; 0x75c <vfprintf+0x260>
 752:	20 e1       	ldi	r18, 0x10	; 16
 754:	30 e0       	ldi	r19, 0x00	; 0
 756:	02 c0       	rjmp	.+4      	; 0x75c <vfprintf+0x260>
 758:	20 e1       	ldi	r18, 0x10	; 16
 75a:	32 e0       	ldi	r19, 0x02	; 2
 75c:	f8 01       	movw	r30, r16
 75e:	b7 fe       	sbrs	r11, 7
 760:	07 c0       	rjmp	.+14     	; 0x770 <vfprintf+0x274>
 762:	60 81       	ld	r22, Z
 764:	71 81       	ldd	r23, Z+1	; 0x01
 766:	82 81       	ldd	r24, Z+2	; 0x02
 768:	93 81       	ldd	r25, Z+3	; 0x03
 76a:	0c 5f       	subi	r16, 0xFC	; 252
 76c:	1f 4f       	sbci	r17, 0xFF	; 255
 76e:	06 c0       	rjmp	.+12     	; 0x77c <vfprintf+0x280>
 770:	60 81       	ld	r22, Z
 772:	71 81       	ldd	r23, Z+1	; 0x01
 774:	80 e0       	ldi	r24, 0x00	; 0
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	0e 5f       	subi	r16, 0xFE	; 254
 77a:	1f 4f       	sbci	r17, 0xFF	; 255
 77c:	a4 01       	movw	r20, r8
 77e:	0e 94 98 04 	call	0x930	; 0x930 <__ultoa_invert>
 782:	a8 2e       	mov	r10, r24
 784:	a8 18       	sub	r10, r8
 786:	fb 2d       	mov	r31, r11
 788:	ff 77       	andi	r31, 0x7F	; 127
 78a:	bf 2e       	mov	r11, r31
 78c:	b6 fe       	sbrs	r11, 6
 78e:	0b c0       	rjmp	.+22     	; 0x7a6 <vfprintf+0x2aa>
 790:	2b 2d       	mov	r18, r11
 792:	2e 7f       	andi	r18, 0xFE	; 254
 794:	a5 14       	cp	r10, r5
 796:	50 f4       	brcc	.+20     	; 0x7ac <vfprintf+0x2b0>
 798:	b4 fe       	sbrs	r11, 4
 79a:	0a c0       	rjmp	.+20     	; 0x7b0 <vfprintf+0x2b4>
 79c:	b2 fc       	sbrc	r11, 2
 79e:	08 c0       	rjmp	.+16     	; 0x7b0 <vfprintf+0x2b4>
 7a0:	2b 2d       	mov	r18, r11
 7a2:	2e 7e       	andi	r18, 0xEE	; 238
 7a4:	05 c0       	rjmp	.+10     	; 0x7b0 <vfprintf+0x2b4>
 7a6:	7a 2c       	mov	r7, r10
 7a8:	2b 2d       	mov	r18, r11
 7aa:	03 c0       	rjmp	.+6      	; 0x7b2 <vfprintf+0x2b6>
 7ac:	7a 2c       	mov	r7, r10
 7ae:	01 c0       	rjmp	.+2      	; 0x7b2 <vfprintf+0x2b6>
 7b0:	75 2c       	mov	r7, r5
 7b2:	24 ff       	sbrs	r18, 4
 7b4:	0d c0       	rjmp	.+26     	; 0x7d0 <vfprintf+0x2d4>
 7b6:	fe 01       	movw	r30, r28
 7b8:	ea 0d       	add	r30, r10
 7ba:	f1 1d       	adc	r31, r1
 7bc:	80 81       	ld	r24, Z
 7be:	80 33       	cpi	r24, 0x30	; 48
 7c0:	11 f4       	brne	.+4      	; 0x7c6 <vfprintf+0x2ca>
 7c2:	29 7e       	andi	r18, 0xE9	; 233
 7c4:	09 c0       	rjmp	.+18     	; 0x7d8 <vfprintf+0x2dc>
 7c6:	22 ff       	sbrs	r18, 2
 7c8:	06 c0       	rjmp	.+12     	; 0x7d6 <vfprintf+0x2da>
 7ca:	73 94       	inc	r7
 7cc:	73 94       	inc	r7
 7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <vfprintf+0x2dc>
 7d0:	82 2f       	mov	r24, r18
 7d2:	86 78       	andi	r24, 0x86	; 134
 7d4:	09 f0       	breq	.+2      	; 0x7d8 <vfprintf+0x2dc>
 7d6:	73 94       	inc	r7
 7d8:	23 fd       	sbrc	r18, 3
 7da:	13 c0       	rjmp	.+38     	; 0x802 <vfprintf+0x306>
 7dc:	20 ff       	sbrs	r18, 0
 7de:	06 c0       	rjmp	.+12     	; 0x7ec <vfprintf+0x2f0>
 7e0:	5a 2c       	mov	r5, r10
 7e2:	73 14       	cp	r7, r3
 7e4:	18 f4       	brcc	.+6      	; 0x7ec <vfprintf+0x2f0>
 7e6:	53 0c       	add	r5, r3
 7e8:	57 18       	sub	r5, r7
 7ea:	73 2c       	mov	r7, r3
 7ec:	73 14       	cp	r7, r3
 7ee:	68 f4       	brcc	.+26     	; 0x80a <vfprintf+0x30e>
 7f0:	b7 01       	movw	r22, r14
 7f2:	80 e2       	ldi	r24, 0x20	; 32
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	2c 87       	std	Y+12, r18	; 0x0c
 7f8:	0e 94 66 04 	call	0x8cc	; 0x8cc <fputc>
 7fc:	73 94       	inc	r7
 7fe:	2c 85       	ldd	r18, Y+12	; 0x0c
 800:	f5 cf       	rjmp	.-22     	; 0x7ec <vfprintf+0x2f0>
 802:	73 14       	cp	r7, r3
 804:	10 f4       	brcc	.+4      	; 0x80a <vfprintf+0x30e>
 806:	37 18       	sub	r3, r7
 808:	01 c0       	rjmp	.+2      	; 0x80c <vfprintf+0x310>
 80a:	31 2c       	mov	r3, r1
 80c:	24 ff       	sbrs	r18, 4
 80e:	12 c0       	rjmp	.+36     	; 0x834 <vfprintf+0x338>
 810:	b7 01       	movw	r22, r14
 812:	80 e3       	ldi	r24, 0x30	; 48
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	2c 87       	std	Y+12, r18	; 0x0c
 818:	0e 94 66 04 	call	0x8cc	; 0x8cc <fputc>
 81c:	2c 85       	ldd	r18, Y+12	; 0x0c
 81e:	22 ff       	sbrs	r18, 2
 820:	17 c0       	rjmp	.+46     	; 0x850 <vfprintf+0x354>
 822:	21 ff       	sbrs	r18, 1
 824:	03 c0       	rjmp	.+6      	; 0x82c <vfprintf+0x330>
 826:	88 e5       	ldi	r24, 0x58	; 88
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	02 c0       	rjmp	.+4      	; 0x830 <vfprintf+0x334>
 82c:	88 e7       	ldi	r24, 0x78	; 120
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	b7 01       	movw	r22, r14
 832:	0c c0       	rjmp	.+24     	; 0x84c <vfprintf+0x350>
 834:	82 2f       	mov	r24, r18
 836:	86 78       	andi	r24, 0x86	; 134
 838:	59 f0       	breq	.+22     	; 0x850 <vfprintf+0x354>
 83a:	21 fd       	sbrc	r18, 1
 83c:	02 c0       	rjmp	.+4      	; 0x842 <vfprintf+0x346>
 83e:	80 e2       	ldi	r24, 0x20	; 32
 840:	01 c0       	rjmp	.+2      	; 0x844 <vfprintf+0x348>
 842:	8b e2       	ldi	r24, 0x2B	; 43
 844:	27 fd       	sbrc	r18, 7
 846:	8d e2       	ldi	r24, 0x2D	; 45
 848:	b7 01       	movw	r22, r14
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	0e 94 66 04 	call	0x8cc	; 0x8cc <fputc>
 850:	a5 14       	cp	r10, r5
 852:	38 f4       	brcc	.+14     	; 0x862 <vfprintf+0x366>
 854:	b7 01       	movw	r22, r14
 856:	80 e3       	ldi	r24, 0x30	; 48
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	0e 94 66 04 	call	0x8cc	; 0x8cc <fputc>
 85e:	5a 94       	dec	r5
 860:	f7 cf       	rjmp	.-18     	; 0x850 <vfprintf+0x354>
 862:	aa 94       	dec	r10
 864:	f4 01       	movw	r30, r8
 866:	ea 0d       	add	r30, r10
 868:	f1 1d       	adc	r31, r1
 86a:	80 81       	ld	r24, Z
 86c:	b7 01       	movw	r22, r14
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	0e 94 66 04 	call	0x8cc	; 0x8cc <fputc>
 874:	a1 10       	cpse	r10, r1
 876:	f5 cf       	rjmp	.-22     	; 0x862 <vfprintf+0x366>
 878:	33 20       	and	r3, r3
 87a:	09 f4       	brne	.+2      	; 0x87e <vfprintf+0x382>
 87c:	51 ce       	rjmp	.-862    	; 0x520 <vfprintf+0x24>
 87e:	b7 01       	movw	r22, r14
 880:	80 e2       	ldi	r24, 0x20	; 32
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	0e 94 66 04 	call	0x8cc	; 0x8cc <fputc>
 888:	3a 94       	dec	r3
 88a:	f6 cf       	rjmp	.-20     	; 0x878 <vfprintf+0x37c>
 88c:	f7 01       	movw	r30, r14
 88e:	86 81       	ldd	r24, Z+6	; 0x06
 890:	97 81       	ldd	r25, Z+7	; 0x07
 892:	02 c0       	rjmp	.+4      	; 0x898 <vfprintf+0x39c>
 894:	8f ef       	ldi	r24, 0xFF	; 255
 896:	9f ef       	ldi	r25, 0xFF	; 255
 898:	2c 96       	adiw	r28, 0x0c	; 12
 89a:	e2 e1       	ldi	r30, 0x12	; 18
 89c:	0c 94 12 05 	jmp	0xa24	; 0xa24 <__epilogue_restores__>

000008a0 <strnlen_P>:
 8a0:	fc 01       	movw	r30, r24
 8a2:	05 90       	lpm	r0, Z+
 8a4:	61 50       	subi	r22, 0x01	; 1
 8a6:	70 40       	sbci	r23, 0x00	; 0
 8a8:	01 10       	cpse	r0, r1
 8aa:	d8 f7       	brcc	.-10     	; 0x8a2 <strnlen_P+0x2>
 8ac:	80 95       	com	r24
 8ae:	90 95       	com	r25
 8b0:	8e 0f       	add	r24, r30
 8b2:	9f 1f       	adc	r25, r31
 8b4:	08 95       	ret

000008b6 <strnlen>:
 8b6:	fc 01       	movw	r30, r24
 8b8:	61 50       	subi	r22, 0x01	; 1
 8ba:	70 40       	sbci	r23, 0x00	; 0
 8bc:	01 90       	ld	r0, Z+
 8be:	01 10       	cpse	r0, r1
 8c0:	d8 f7       	brcc	.-10     	; 0x8b8 <strnlen+0x2>
 8c2:	80 95       	com	r24
 8c4:	90 95       	com	r25
 8c6:	8e 0f       	add	r24, r30
 8c8:	9f 1f       	adc	r25, r31
 8ca:	08 95       	ret

000008cc <fputc>:
 8cc:	0f 93       	push	r16
 8ce:	1f 93       	push	r17
 8d0:	cf 93       	push	r28
 8d2:	df 93       	push	r29
 8d4:	18 2f       	mov	r17, r24
 8d6:	09 2f       	mov	r16, r25
 8d8:	eb 01       	movw	r28, r22
 8da:	8b 81       	ldd	r24, Y+3	; 0x03
 8dc:	81 fd       	sbrc	r24, 1
 8de:	03 c0       	rjmp	.+6      	; 0x8e6 <fputc+0x1a>
 8e0:	8f ef       	ldi	r24, 0xFF	; 255
 8e2:	9f ef       	ldi	r25, 0xFF	; 255
 8e4:	20 c0       	rjmp	.+64     	; 0x926 <__stack+0x27>
 8e6:	82 ff       	sbrs	r24, 2
 8e8:	10 c0       	rjmp	.+32     	; 0x90a <__stack+0xb>
 8ea:	4e 81       	ldd	r20, Y+6	; 0x06
 8ec:	5f 81       	ldd	r21, Y+7	; 0x07
 8ee:	2c 81       	ldd	r18, Y+4	; 0x04
 8f0:	3d 81       	ldd	r19, Y+5	; 0x05
 8f2:	42 17       	cp	r20, r18
 8f4:	53 07       	cpc	r21, r19
 8f6:	7c f4       	brge	.+30     	; 0x916 <__stack+0x17>
 8f8:	e8 81       	ld	r30, Y
 8fa:	f9 81       	ldd	r31, Y+1	; 0x01
 8fc:	9f 01       	movw	r18, r30
 8fe:	2f 5f       	subi	r18, 0xFF	; 255
 900:	3f 4f       	sbci	r19, 0xFF	; 255
 902:	39 83       	std	Y+1, r19	; 0x01
 904:	28 83       	st	Y, r18
 906:	10 83       	st	Z, r17
 908:	06 c0       	rjmp	.+12     	; 0x916 <__stack+0x17>
 90a:	e8 85       	ldd	r30, Y+8	; 0x08
 90c:	f9 85       	ldd	r31, Y+9	; 0x09
 90e:	81 2f       	mov	r24, r17
 910:	09 95       	icall
 912:	89 2b       	or	r24, r25
 914:	29 f7       	brne	.-54     	; 0x8e0 <fputc+0x14>
 916:	2e 81       	ldd	r18, Y+6	; 0x06
 918:	3f 81       	ldd	r19, Y+7	; 0x07
 91a:	2f 5f       	subi	r18, 0xFF	; 255
 91c:	3f 4f       	sbci	r19, 0xFF	; 255
 91e:	3f 83       	std	Y+7, r19	; 0x07
 920:	2e 83       	std	Y+6, r18	; 0x06
 922:	81 2f       	mov	r24, r17
 924:	90 2f       	mov	r25, r16
 926:	df 91       	pop	r29
 928:	cf 91       	pop	r28
 92a:	1f 91       	pop	r17
 92c:	0f 91       	pop	r16
 92e:	08 95       	ret

00000930 <__ultoa_invert>:
 930:	fa 01       	movw	r30, r20
 932:	aa 27       	eor	r26, r26
 934:	28 30       	cpi	r18, 0x08	; 8
 936:	51 f1       	breq	.+84     	; 0x98c <__ultoa_invert+0x5c>
 938:	20 31       	cpi	r18, 0x10	; 16
 93a:	81 f1       	breq	.+96     	; 0x99c <__ultoa_invert+0x6c>
 93c:	e8 94       	clt
 93e:	6f 93       	push	r22
 940:	6e 7f       	andi	r22, 0xFE	; 254
 942:	6e 5f       	subi	r22, 0xFE	; 254
 944:	7f 4f       	sbci	r23, 0xFF	; 255
 946:	8f 4f       	sbci	r24, 0xFF	; 255
 948:	9f 4f       	sbci	r25, 0xFF	; 255
 94a:	af 4f       	sbci	r26, 0xFF	; 255
 94c:	b1 e0       	ldi	r27, 0x01	; 1
 94e:	3e d0       	rcall	.+124    	; 0x9cc <__ultoa_invert+0x9c>
 950:	b4 e0       	ldi	r27, 0x04	; 4
 952:	3c d0       	rcall	.+120    	; 0x9cc <__ultoa_invert+0x9c>
 954:	67 0f       	add	r22, r23
 956:	78 1f       	adc	r23, r24
 958:	89 1f       	adc	r24, r25
 95a:	9a 1f       	adc	r25, r26
 95c:	a1 1d       	adc	r26, r1
 95e:	68 0f       	add	r22, r24
 960:	79 1f       	adc	r23, r25
 962:	8a 1f       	adc	r24, r26
 964:	91 1d       	adc	r25, r1
 966:	a1 1d       	adc	r26, r1
 968:	6a 0f       	add	r22, r26
 96a:	71 1d       	adc	r23, r1
 96c:	81 1d       	adc	r24, r1
 96e:	91 1d       	adc	r25, r1
 970:	a1 1d       	adc	r26, r1
 972:	20 d0       	rcall	.+64     	; 0x9b4 <__ultoa_invert+0x84>
 974:	09 f4       	brne	.+2      	; 0x978 <__ultoa_invert+0x48>
 976:	68 94       	set
 978:	3f 91       	pop	r19
 97a:	2a e0       	ldi	r18, 0x0A	; 10
 97c:	26 9f       	mul	r18, r22
 97e:	11 24       	eor	r1, r1
 980:	30 19       	sub	r19, r0
 982:	30 5d       	subi	r19, 0xD0	; 208
 984:	31 93       	st	Z+, r19
 986:	de f6       	brtc	.-74     	; 0x93e <__ultoa_invert+0xe>
 988:	cf 01       	movw	r24, r30
 98a:	08 95       	ret
 98c:	46 2f       	mov	r20, r22
 98e:	47 70       	andi	r20, 0x07	; 7
 990:	40 5d       	subi	r20, 0xD0	; 208
 992:	41 93       	st	Z+, r20
 994:	b3 e0       	ldi	r27, 0x03	; 3
 996:	0f d0       	rcall	.+30     	; 0x9b6 <__ultoa_invert+0x86>
 998:	c9 f7       	brne	.-14     	; 0x98c <__ultoa_invert+0x5c>
 99a:	f6 cf       	rjmp	.-20     	; 0x988 <__ultoa_invert+0x58>
 99c:	46 2f       	mov	r20, r22
 99e:	4f 70       	andi	r20, 0x0F	; 15
 9a0:	40 5d       	subi	r20, 0xD0	; 208
 9a2:	4a 33       	cpi	r20, 0x3A	; 58
 9a4:	18 f0       	brcs	.+6      	; 0x9ac <__ultoa_invert+0x7c>
 9a6:	49 5d       	subi	r20, 0xD9	; 217
 9a8:	31 fd       	sbrc	r19, 1
 9aa:	40 52       	subi	r20, 0x20	; 32
 9ac:	41 93       	st	Z+, r20
 9ae:	02 d0       	rcall	.+4      	; 0x9b4 <__ultoa_invert+0x84>
 9b0:	a9 f7       	brne	.-22     	; 0x99c <__ultoa_invert+0x6c>
 9b2:	ea cf       	rjmp	.-44     	; 0x988 <__ultoa_invert+0x58>
 9b4:	b4 e0       	ldi	r27, 0x04	; 4
 9b6:	a6 95       	lsr	r26
 9b8:	97 95       	ror	r25
 9ba:	87 95       	ror	r24
 9bc:	77 95       	ror	r23
 9be:	67 95       	ror	r22
 9c0:	ba 95       	dec	r27
 9c2:	c9 f7       	brne	.-14     	; 0x9b6 <__ultoa_invert+0x86>
 9c4:	00 97       	sbiw	r24, 0x00	; 0
 9c6:	61 05       	cpc	r22, r1
 9c8:	71 05       	cpc	r23, r1
 9ca:	08 95       	ret
 9cc:	9b 01       	movw	r18, r22
 9ce:	ac 01       	movw	r20, r24
 9d0:	0a 2e       	mov	r0, r26
 9d2:	06 94       	lsr	r0
 9d4:	57 95       	ror	r21
 9d6:	47 95       	ror	r20
 9d8:	37 95       	ror	r19
 9da:	27 95       	ror	r18
 9dc:	ba 95       	dec	r27
 9de:	c9 f7       	brne	.-14     	; 0x9d2 <__ultoa_invert+0xa2>
 9e0:	62 0f       	add	r22, r18
 9e2:	73 1f       	adc	r23, r19
 9e4:	84 1f       	adc	r24, r20
 9e6:	95 1f       	adc	r25, r21
 9e8:	a0 1d       	adc	r26, r0
 9ea:	08 95       	ret

000009ec <__prologue_saves__>:
 9ec:	2f 92       	push	r2
 9ee:	3f 92       	push	r3
 9f0:	4f 92       	push	r4
 9f2:	5f 92       	push	r5
 9f4:	6f 92       	push	r6
 9f6:	7f 92       	push	r7
 9f8:	8f 92       	push	r8
 9fa:	9f 92       	push	r9
 9fc:	af 92       	push	r10
 9fe:	bf 92       	push	r11
 a00:	cf 92       	push	r12
 a02:	df 92       	push	r13
 a04:	ef 92       	push	r14
 a06:	ff 92       	push	r15
 a08:	0f 93       	push	r16
 a0a:	1f 93       	push	r17
 a0c:	cf 93       	push	r28
 a0e:	df 93       	push	r29
 a10:	cd b7       	in	r28, 0x3d	; 61
 a12:	de b7       	in	r29, 0x3e	; 62
 a14:	ca 1b       	sub	r28, r26
 a16:	db 0b       	sbc	r29, r27
 a18:	0f b6       	in	r0, 0x3f	; 63
 a1a:	f8 94       	cli
 a1c:	de bf       	out	0x3e, r29	; 62
 a1e:	0f be       	out	0x3f, r0	; 63
 a20:	cd bf       	out	0x3d, r28	; 61
 a22:	09 94       	ijmp

00000a24 <__epilogue_restores__>:
 a24:	2a 88       	ldd	r2, Y+18	; 0x12
 a26:	39 88       	ldd	r3, Y+17	; 0x11
 a28:	48 88       	ldd	r4, Y+16	; 0x10
 a2a:	5f 84       	ldd	r5, Y+15	; 0x0f
 a2c:	6e 84       	ldd	r6, Y+14	; 0x0e
 a2e:	7d 84       	ldd	r7, Y+13	; 0x0d
 a30:	8c 84       	ldd	r8, Y+12	; 0x0c
 a32:	9b 84       	ldd	r9, Y+11	; 0x0b
 a34:	aa 84       	ldd	r10, Y+10	; 0x0a
 a36:	b9 84       	ldd	r11, Y+9	; 0x09
 a38:	c8 84       	ldd	r12, Y+8	; 0x08
 a3a:	df 80       	ldd	r13, Y+7	; 0x07
 a3c:	ee 80       	ldd	r14, Y+6	; 0x06
 a3e:	fd 80       	ldd	r15, Y+5	; 0x05
 a40:	0c 81       	ldd	r16, Y+4	; 0x04
 a42:	1b 81       	ldd	r17, Y+3	; 0x03
 a44:	aa 81       	ldd	r26, Y+2	; 0x02
 a46:	b9 81       	ldd	r27, Y+1	; 0x01
 a48:	ce 0f       	add	r28, r30
 a4a:	d1 1d       	adc	r29, r1
 a4c:	0f b6       	in	r0, 0x3f	; 63
 a4e:	f8 94       	cli
 a50:	de bf       	out	0x3e, r29	; 62
 a52:	0f be       	out	0x3f, r0	; 63
 a54:	cd bf       	out	0x3d, r28	; 61
 a56:	ed 01       	movw	r28, r26
 a58:	08 95       	ret

00000a5a <_exit>:
 a5a:	f8 94       	cli

00000a5c <__stop_program>:
 a5c:	ff cf       	rjmp	.-2      	; 0xa5c <__stop_program>

   1               		.file	"uart.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	uart_init
  12               	uart_init:
  13               	.LFB1:
  14               		.file 1 "uart.c"
   1:uart.c        **** #include <avr/io.h>
   2:uart.c        **** #include <stdio.h>
   3:uart.c        **** 
   4:uart.c        **** #ifndef F_CPU
   5:uart.c        **** #define F_CPU 16000000UL
   6:uart.c        **** #endif
   7:uart.c        **** 
   8:uart.c        **** #ifndef BAUD
   9:uart.c        **** #define BAUD 19200
  10:uart.c        **** #endif
  11:uart.c        **** #include <util/setbaud.h>
  12:uart.c        **** 
  13:uart.c        **** /* http://www.cs.mun.ca/~rod/Winter2007/4723/notes/serial/serial.html */
  14:uart.c        **** 
  15:uart.c        **** void uart_init(void) {
  15               		.loc 1 15 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  16:uart.c        ****     UBRR0H = UBRRH_VALUE;
  21               		.loc 1 16 0
  22 0000 1092 C500 		sts 197,__zero_reg__
  17:uart.c        ****     UBRR0L = UBRRL_VALUE;
  23               		.loc 1 17 0
  24 0004 83E3      		ldi r24,lo8(51)
  25 0006 8093 C400 		sts 196,r24
  18:uart.c        ****     
  19:uart.c        **** #if USE_2X
  20:uart.c        ****     UCSR0A |= _BV(U2X0);
  21:uart.c        **** #else
  22:uart.c        ****     UCSR0A &= ~(_BV(U2X0));
  26               		.loc 1 22 0
  27 000a E0EC      		ldi r30,lo8(-64)
  28 000c F0E0      		ldi r31,0
  29 000e 8081      		ld r24,Z
  30 0010 8D7F      		andi r24,lo8(-3)
  31 0012 8083      		st Z,r24
  23:uart.c        **** #endif
  24:uart.c        **** 
  25:uart.c        ****     UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */ 
  32               		.loc 1 25 0
  33 0014 86E0      		ldi r24,lo8(6)
  34 0016 8093 C200 		sts 194,r24
  26:uart.c        ****     UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */    
  35               		.loc 1 26 0
  36 001a 88E1      		ldi r24,lo8(24)
  37 001c 8093 C100 		sts 193,r24
  38 0020 0895      		ret
  39               		.cfi_endproc
  40               	.LFE1:
  42               	.global	uart_putchar
  44               	uart_putchar:
  45               	.LFB2:
  27:uart.c        **** }
  28:uart.c        **** 
  29:uart.c        **** void uart_putchar(char c, FILE *stream) {
  46               		.loc 1 29 0
  47               		.cfi_startproc
  48               	.LVL0:
  49 0022 CF93      		push r28
  50               	.LCFI0:
  51               		.cfi_def_cfa_offset 3
  52               		.cfi_offset 28, -2
  53               	/* prologue: function */
  54               	/* frame size = 0 */
  55               	/* stack size = 1 */
  56               	.L__stack_usage = 1
  57 0024 C82F      		mov r28,r24
  30:uart.c        ****     if (c == '\n') {
  58               		.loc 1 30 0
  59 0026 8A30      		cpi r24,lo8(10)
  60 0028 01F4      		brne .L5
  31:uart.c        ****         uart_putchar('\r', stream);
  61               		.loc 1 31 0
  62 002a 8DE0      		ldi r24,lo8(13)
  63               	.LVL1:
  64 002c 0E94 0000 		call uart_putchar
  65               	.LVL2:
  66               	.L5:
  32:uart.c        ****     }
  33:uart.c        ****     loop_until_bit_is_set(UCSR0A, UDRE0);
  67               		.loc 1 33 0 discriminator 1
  68 0030 8091 C000 		lds r24,192
  69 0034 85FF      		sbrs r24,5
  70 0036 00C0      		rjmp .L5
  34:uart.c        ****     UDR0 = c;
  71               		.loc 1 34 0
  72 0038 C093 C600 		sts 198,r28
  73               	/* epilogue start */
  35:uart.c        **** }
  74               		.loc 1 35 0
  75 003c CF91      		pop r28
  76               	.LVL3:
  77 003e 0895      		ret
  78               		.cfi_endproc
  79               	.LFE2:
  81               	.global	uart_getchar
  83               	uart_getchar:
  84               	.LFB3:
  36:uart.c        **** 
  37:uart.c        **** char uart_getchar(FILE *stream) {
  85               		.loc 1 37 0
  86               		.cfi_startproc
  87               	/* prologue: function */
  88               	/* frame size = 0 */
  89               	/* stack size = 0 */
  90               	.L__stack_usage = 0
  91               	.LVL4:
  92               	.L9:
  38:uart.c        ****     loop_until_bit_is_set(UCSR0A, RXC0);
  93               		.loc 1 38 0 discriminator 1
  94 0040 8091 C000 		lds r24,192
  95 0044 87FF      		sbrs r24,7
  96 0046 00C0      		rjmp .L9
  39:uart.c        ****     return UDR0;
  97               		.loc 1 39 0
  98 0048 8091 C600 		lds r24,198
  40:uart.c        **** }
  99               		.loc 1 40 0
 100 004c 0895      		ret
 101               		.cfi_endproc
 102               	.LFE3:
 104               	.Letext0:
 105               		.file 2 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 106               		.file 3 "/usr/local/CrossPack-AVR-20131216/avr/include/stdio.h"
DEFINED SYMBOLS
                            *ABS*:00000000 uart.c
/var/folders/k_/m6drp_kj3rl_zc7vsyk4611c0000gn/T//ccEXVLMR.s:2      *ABS*:0000003e __SP_H__
/var/folders/k_/m6drp_kj3rl_zc7vsyk4611c0000gn/T//ccEXVLMR.s:3      *ABS*:0000003d __SP_L__
/var/folders/k_/m6drp_kj3rl_zc7vsyk4611c0000gn/T//ccEXVLMR.s:4      *ABS*:0000003f __SREG__
/var/folders/k_/m6drp_kj3rl_zc7vsyk4611c0000gn/T//ccEXVLMR.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/k_/m6drp_kj3rl_zc7vsyk4611c0000gn/T//ccEXVLMR.s:6      *ABS*:00000001 __zero_reg__
/var/folders/k_/m6drp_kj3rl_zc7vsyk4611c0000gn/T//ccEXVLMR.s:12     .text:00000000 uart_init
/var/folders/k_/m6drp_kj3rl_zc7vsyk4611c0000gn/T//ccEXVLMR.s:44     .text:00000022 uart_putchar
/var/folders/k_/m6drp_kj3rl_zc7vsyk4611c0000gn/T//ccEXVLMR.s:83     .text:00000040 uart_getchar

NO UNDEFINED SYMBOLS
